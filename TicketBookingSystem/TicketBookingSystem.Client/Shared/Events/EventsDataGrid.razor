@using TicketBookingSystem.Client.Shared.Tickets
@using TicketBookingSystem.Shared.Dictionaries
@using TicketBookingSystem.Shared.Domain
@inject IEventService EventService
@inject NavigationManager NavigationManager
@inject IDialogService Dialog

<MudDataGrid T="Event" Items="@EventService.Events">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Wydarzenia</MudText>
    </ToolBarContent>

    <Columns>
        <HierarchyColumn T="Event" />
        <Column T="Event" Field="Name" Title="Nazwa" />
        <Column T="Event" Field="EventTime" Title="Data" />
    </Columns>
    <ChildRowContent>
        <MudCard>
            <MudCardContent Class="mt-3">
                <MudGrid Class="d-flex flex-grow-1 gap-4">
                    <MudItem xs="4" Class="align-self-center py-4 flex-1">
                        <MudText Typo="Typo.h6">@context.Item.Name</MudText>
                        @if (!string.IsNullOrEmpty(context.Item.PhotoUrl))
                        {
                            <MudImage Src="@context.Item.PhotoUrl" Alt="@context.Item.Name" Height="230" Elevation="50" Fluid="true" Class="rounded-lg mt-2" />
                        }
                    </MudItem>
                    <MudItem xs="5" Class="align-self-center py-4 flex-1">
                        <MudText Typo="Typo.h6">@context.Item.Artist.NickName</MudText>
                        <MudText Typo="Typo.body1" Class="mb-2">(@context.Item.Artist.FirstName @context.Item.Artist.LastName)</MudText>
                        <MudIcon Icon="@Icons.Filled.LocationCity" Title="Lokalizacja" />
                        <MudText Typo="Typo.body2" Class="ml-1"> @context.Item.Place.Name - @context.Item.Place.City (@context.Item.Place.Country)</MudText>
                        <MudIcon Icon="@Icons.Filled.Description" Title="Opis" Class="mt-2" />
                        <MudText Typo="Typo.body2" Class="ml-1"> @(string.IsNullOrEmpty(context.Item.Description) ? "Brak informacji o koncercie, ale z pewnością jest interesujący!" : context.Item.Description)</MudText>
                            <MudIcon Icon="@Icons.Filled.AccessTime" Title="Już za" Class="mt-2" />
                            <MudText Typo="Typo.body2" Class="ml-1"> @GetFormattedDateTimeStringLeft(context.Item.EventTime)</MudText>
                            <MudIcon Icon="@Icons.Filled.Chair" Title="Dostępne miejsca" Class="mt-2" />
                            <MudText Typo="Typo.body2" Class="ml-1"> Pozostało @context.Item.AvailableStandingTickets miejsc stojących i @context.Item.AvailableSittingTickets siedzących.</MudText>
                        </MudItem>
                        <MudItem xs="3" Class="align-self-center flex-1 text-align px-12">
                            <AuthorizeView Context="authorizeContext">
                                <div>
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="py-4" FullWidth @onclick="@(() => OpenBuyTicketPopup(context.Item.Id, context.Item.Name))">Kup bilet</MudButton>
                                </div>
                            </AuthorizeView>
                            <AuthorizeView Context="authorizeContext" Roles="Administrator">
                                <div>
                                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" Class="py-4 mt-4" FullWidth @onclick="@(() => RouteToEdit(context.Item.Id))">Edytuj</MudButton>
                                </div>
                            </AuthorizeView>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        </ChildRowContent>
    </MudDataGrid>

    @code {
    [Parameter]
    public int? Id { get; set; }

    string GetFormattedDateTimeStringLeft(DateTime dateTime)
    {
        TimeSpan timeSpan = dateTime - DateTime.Now;
        int days = timeSpan.Days;
        int hours = timeSpan.Hours;
        int minutes = timeSpan.Minutes;
        if (timeSpan.Ticks < 0)
            return $"Wydarzenie miało miejsce {(days != 0 ? $"{Math.Abs(days)} dni," : "")}{(hours != 0 ? $" {Math.Abs(hours)} godzin," : "")}{(minutes != 0 ? $" {Math.Abs(minutes)} minut" : "")} temu.";
        return $"Już za {(days != 0 ? $"{Math.Abs(days)} dni," : "")}{(hours != 0 ? $" {Math.Abs(hours)} godzin, " : "")}{(minutes != 0 ? $" {Math.Abs(minutes)} minut" : "")}!";
    }

    async Task OpenBuyTicketPopup(int id, string name)
    {
        DialogOptions options = new()
            {
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            };
        DialogParameters parameters = new();
        parameters.Add("Id", id);
        var dialog = Dialog.Show<BuyTicket>($"Kup bilet na {name}", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {

        }
    }

    void RouteToEdit(int id)
    {
        NavigationManager.NavigateTo($"/event/edit/{id}");
    }
}
<style>
    .text-align {
        text-align: center;
    }
</style>