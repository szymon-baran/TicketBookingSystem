@page "/event/add"
@page "/event/edit/{id:int}"
@using TicketBookingSystem.Shared.Domain
@inject IEventService EventService

@if (Id == null)
{
    <PageTitle>Dodaj wydarzenie</PageTitle>
    <MudText Typo="Typo.h3" GutterBottom="true">Dodaj wydarzenie</MudText>
}
else
{
    <PageTitle>Edytuj @selectedEvent.Name</PageTitle>
    <MudText Typo="Typo.h3" GutterBottom="true">Edytuj @selectedEvent.Name</MudText>
}
<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField @bind-Value="selectedEvent.Name" T="string" Label="Nazwa zdarzenia" Required="true" RequiredError="Nazwa zdarzenia jest wymagana!" />
@*                <MudDatePicker @bind-Value="selectedEvent.EventTime" Label="Data zdarzenia" Required="true" RequiredError="Data jest wymagana!" />
                <MudTimePicker @bind-Value="selectedEvent.EventTime" Label="Godzina zdarzenia" Required="true" RequiredError="Godzina jest wymagana!" />
*@                <MudSelect @bind-Value="selectedEvent.ArtistId" T="int" Label="Artysta" AnchorOrigin="Origin.BottomCenter" Required="true" RequiredError="Artysta jest wymagany!">
                    @*@foreach (var artist in ArtistService.Artists)
                    {
                    <MudSelectItem Value="@artist.Value">@artist.Text</MudSelectItem>
                    }*@
                    <MudSelectItem Value="1">Test1</MudSelectItem>
                    <MudSelectItem Value="2">Test2</MudSelectItem>
                </MudSelect>
                <div class="d-flex align-center justify-space-between mt-5">
                    <MudCheckBox T="bool" Required="true" RequiredError="Potwierdź wprowadzone dane" Label="Potwierdzam wprowadzone dane" />
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto mt-1" @onclick="(() => Submit())">@submitBtnText</MudButton>
                    @if (Id != null)
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick="(() => DeleteEvent())" Class="mt-1">Usuń</MudButton>
                    }
                </div>
            </MudForm>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Wystąpiły błędy: ({errors.Length})")</MudText>
            @foreach (var error in errors)
            {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public int? Id { get; set; }

    string submitBtnText = "";

    bool success;
    string[] errors = { };

    EventAddEditVM selectedEvent = new();
    MudForm form;

    protected async override Task OnInitializedAsync()
    {
        submitBtnText = Id == null ? "Dodaj" : "Edytuj";
        // await ArtistService.GetArtistsToSelectList();
        // toy.ArtistId ??= ArtistService.ArtistsToSelectList.FirstOrDefault().Key;
        // await PlaceService.GetPlacesToSelectList();
        // toy.PlaceId ??= PlaceService.PlacesToSelectList.FirstOrDefault().Key;
    }

    protected async override Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            // AddForm
        }
        else
        {
            if (Id.HasValue)
                selectedEvent = await EventService.GetEventDetails(Id.Value);
        }
    }

    async Task Submit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            if (Id == null)
            {
                await EventService.AddEvent(selectedEvent);
            }
            else
            {
                await EventService.EditEvent(selectedEvent);
            }
        }
    }

    async Task DeleteEvent()
    {
        await EventService.DeleteEvent(selectedEvent.Id.HasValue ? selectedEvent.Id.Value : throw new Exception("Brak ID!"));
    }
}