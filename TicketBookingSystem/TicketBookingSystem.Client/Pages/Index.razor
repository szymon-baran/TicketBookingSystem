@page "/"
@using TicketBookingSystem.Client.Shared.Events
@using TicketBookingSystem.Shared.Domain
@inject IEventService EventService

<PageTitle>Strona główna</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">System rezerwacji biletów</MudText>
<MudText Class="mb-8">Sposób na wyszukanie biletów na wydarzenia muzyczne w najlepszych cenach!</MudText>
<AuthorizeView Context="authorizeViewContext">
    <NotAuthorized>
        <MudAlert Severity="Severity.Info">Aby uzyskać dostęp do pełnej wersji serwisu i otrzymać rekomendacje dobrane do Twojego profilu, zaloguj się <MudLink href="authentication/login" Typo="Typo.subtitle2" Color="Color.Inherit">tutaj</MudLink>.</MudAlert>
        <MudCarousel Class="mud-width-full rounded-lg border-solid border-2 mud-border-primary mt-4" Style="height:45vh; width:100%;" ItemsSource="@eventPhotoUrls" @bind-SelectedIndex="selectedIndex" ShowArrows="true" ShowBullets="true" EnableSwipeGesture="true" AutoCycle="true">
            <ItemTemplate>
                <div class="d-flex flex-column flex-column pointer" style="height:100%; background-color: rgba(0, 0, 0, 0.15)">
                    <MudText Align="Align.Center" Style="font-size:20px;" Class="mt-2 mb-2">@eventNames[selectedIndex]</MudText>
                    <MudImage ObjectPosition="ObjectPosition.Top" Style="width:100%;" Src="@eventPhotoUrls[selectedIndex]" Fluid="true"></MudImage>
                </div>
            </ItemTemplate>
        </MudCarousel>
    </NotAuthorized>
</AuthorizeView>
<AuthorizeView>
    <Authorized>
        @if (EventService.EventsForUserRecommendation != null && EventService.EventsForUserRecommendation.Count > 0)
        {
            <RecommendedEventsCarousel></RecommendedEventsCarousel>
        }
    </Authorized>
</AuthorizeView>
@code {
    private int selectedIndex = 0;
    List<string> eventPhotoUrls = new();
    List<string> eventNames = new();

    [CascadingParameter]
    private Task<AuthenticationState> _authStateTask { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var authState = await _authStateTask;
        var user = authState.User;
        var isAuthenticated = user.Identity?.IsAuthenticated ?? false;

        if (isAuthenticated)
        {
            await EventService.GetEventsForUserRecommendation();
        }
        else
        {
            await EventService.GetEventsList(TicketBookingSystem.Shared.Dictionaries.MusicGenre.None);
            foreach (var item in EventService.Events)
            {
                eventPhotoUrls.Add(item.PhotoUrl);
                eventNames.Add(item.Name);
            }
        }

    }
}